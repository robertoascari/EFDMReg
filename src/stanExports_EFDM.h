// Generated by rstantools.  Do not edit by hand.

/*
    EFDMReg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EFDMReg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EFDMReg.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_EFDM_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 106> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 21, column 1 to column 24)",
  " (in 'string', line 22, column 1 to column 21)",
  " (in 'string', line 23, column 1 to column 14)",
  " (in 'string', line 24, column 1 to column 35)",
  " (in 'string', line 27, column 1 to column 18)",
  " (in 'string', line 28, column 1 to column 16)",
  " (in 'string', line 29, column 1 to column 20)",
  " (in 'string', line 91, column 1 to column 19)",
  " (in 'string', line 32, column 2 to column 18)",
  " (in 'string', line 31, column 16 to line 33, column 2)",
  " (in 'string', line 31, column 1 to line 33, column 2)",
  " (in 'string', line 36, column 3 to column 29)",
  " (in 'string', line 35, column 17 to line 37, column 3)",
  " (in 'string', line 35, column 2 to line 37, column 3)",
  " (in 'string', line 34, column 20 to line 38, column 2)",
  " (in 'string', line 34, column 1 to line 38, column 2)",
  " (in 'string', line 42, column 3 to column 45)",
  " (in 'string', line 41, column 16 to line 43, column 3)",
  " (in 'string', line 41, column 2 to line 43, column 3)",
  " (in 'string', line 44, column 2 to column 57)",
  " (in 'string', line 40, column 16 to line 45, column 2)",
  " (in 'string', line 40, column 1 to line 45, column 2)",
  " (in 'string', line 94, column 2 to column 12)",
  " (in 'string', line 95, column 2 to column 13)",
  " (in 'string', line 96, column 9 to column 10)",
  " (in 'string', line 96, column 2 to column 18)",
  " (in 'string', line 97, column 9 to column 10)",
  " (in 'string', line 97, column 2 to column 19)",
  " (in 'string', line 98, column 9 to column 10)",
  " (in 'string', line 98, column 2 to column 16)",
  " (in 'string', line 99, column 2 to column 13)",
  " (in 'string', line 100, column 2 to column 14)",
  " (in 'string', line 103, column 4 to column 55)",
  " (in 'string', line 102, column 15 to line 104, column 3)",
  " (in 'string', line 102, column 2 to line 104, column 3)",
  " (in 'string', line 107, column 3 to column 83)",
  " (in 'string', line 108, column 3 to column 92)",
  " (in 'string', line 110, column 3 to column 80)",
  " (in 'string', line 111, column 3 to column 183)",
  " (in 'string', line 106, column 15 to line 112, column 3)",
  " (in 'string', line 106, column 2 to line 112, column 3)",
  " (in 'string', line 113, column 2 to column 59)",
  " (in 'string', line 93, column 16 to line 114, column 2)",
  " (in 'string', line 93, column 1 to line 114, column 2)",
  " (in 'string', line 51, column 1 to column 33)",
  " (in 'string', line 53, column 2 to column 32)",
  " (in 'string', line 56, column 4 to column 28)",
  " (in 'string', line 55, column 15 to line 57, column 3)",
  " (in 'string', line 55, column 2 to line 57, column 3)",
  " (in 'string', line 62, column 3 to column 38)",
  " (in 'string', line 61, column 17 to line 63, column 3)",
  " (in 'string', line 61, column 2 to line 63, column 3)",
  " (in 'string', line 60, column 20 to line 64, column 2)",
  " (in 'string', line 60, column 1 to line 64, column 2)",
  " (in 'string', line 68, column 2 to column 12)",
  " (in 'string', line 69, column 2 to column 13)",
  " (in 'string', line 70, column 9 to column 10)",
  " (in 'string', line 70, column 2 to column 18)",
  " (in 'string', line 71, column 9 to column 10)",
  " (in 'string', line 71, column 2 to column 19)",
  " (in 'string', line 72, column 9 to column 10)",
  " (in 'string', line 72, column 2 to column 16)",
  " (in 'string', line 73, column 2 to column 13)",
  " (in 'string', line 74, column 2 to column 14)",
  " (in 'string', line 77, column 4 to column 55)",
  " (in 'string', line 76, column 15 to line 78, column 3)",
  " (in 'string', line 76, column 2 to line 78, column 3)",
  " (in 'string', line 81, column 3 to column 83)",
  " (in 'string', line 82, column 3 to column 92)",
  " (in 'string', line 84, column 3 to column 80)",
  " (in 'string', line 85, column 3 to column 183)",
  " (in 'string', line 80, column 15 to line 86, column 3)",
  " (in 'string', line 80, column 2 to line 86, column 3)",
  " (in 'string', line 87, column 4 to column 58)",
  " (in 'string', line 67, column 16 to line 88, column 2)",
  " (in 'string', line 67, column 1 to line 88, column 2)",
  " (in 'string', line 2, column 1 to column 16)",
  " (in 'string', line 3, column 1 to column 16)",
  " (in 'string', line 4, column 16 to column 17)",
  " (in 'string', line 4, column 1 to column 19)",
  " (in 'string', line 5, column 1 to column 16)",
  " (in 'string', line 6, column 8 to column 9)",
  " (in 'string', line 6, column 10 to column 11)",
  " (in 'string', line 6, column 1 to column 15)",
  " (in 'string', line 8, column 7 to column 8)",
  " (in 'string', line 8, column 9 to column 10)",
  " (in 'string', line 8, column 1 to column 12)",
  " (in 'string', line 9, column 1 to column 15)",
  " (in 'string', line 14, column 8 to column 9)",
  " (in 'string', line 14, column 10 to column 11)",
  " (in 'string', line 14, column 1 to column 20)",
  " (in 'string', line 17, column 2 to column 36)",
  " (in 'string', line 16, column 14 to line 18, column 2)",
  " (in 'string', line 16, column 1 to line 18, column 2)",
  " (in 'string', line 21, column 8 to column 11)",
  " (in 'string', line 21, column 12 to column 13)",
  " (in 'string', line 23, column 9 to column 10)",
  " (in 'string', line 24, column 25 to column 26)",
  " (in 'string', line 27, column 8 to column 9)",
  " (in 'string', line 27, column 10 to column 11)",
  " (in 'string', line 28, column 8 to column 9)",
  " (in 'string', line 28, column 10 to column 11)",
  " (in 'string', line 29, column 8 to column 9)",
  " (in 'string', line 29, column 10 to column 11)",
  " (in 'string', line 91, column 8 to column 9)"};
#include <stan_meta_header.hpp>
class model_EFDM final : public model_base_crtp<model_EFDM> {
private:
  int N;
  int D;
  std::vector<int> n;
  int K;
  Eigen::Matrix<double,-1,-1> X_data__;
  std::vector<std::vector<int>> Y;
  double sd_prior;
  Eigen::Matrix<double,-1,-1> Y_real_data__;
  int beta_raw_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Y_real{nullptr, 0, 0};
public:
  ~model_EFDM() {}
  model_EFDM(stan::io::var_context& context__, unsigned int
             random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_EFDM_namespace::model_EFDM";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 77;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 77;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 78;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "D", D, 2);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("n", "N", N);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      n = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 80;
      n = context__.vals_i("n");
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 81;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 81;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 84;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 84;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 84;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 85;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("Y", "D", D);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(D)});
      Y = std::vector<std::vector<int>>(N,
            std::vector<int>(D, std::numeric_limits<int>::min()));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 87;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 87;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 87;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 88;
      context__.validate_dims("data initialization", "sd_prior", "double",
        std::vector<size_t>{});
      sd_prior = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 88;
      sd_prior = context__.vals_r("sd_prior")[(1 - 1)];
      current_statement__ = 89;
      stan::math::validate_non_negative_index("Y_real", "N", N);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("Y_real", "D", D);
      current_statement__ = 91;
      Y_real_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, D,
                        std::numeric_limits<double>::quiet_NaN());
      new (&Y_real)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Y_real_data__.data(), N, D);
      current_statement__ = 94;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 92;
        stan::model::assign(Y_real,
          stan::math::to_row_vector(
            stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
              stan::model::index_omni())), "assigning variable Y_real",
          stan::model::index_uni(i), stan::model::index_omni());
      }
      current_statement__ = 95;
      beta_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 95;
      beta_raw_1dim__ = (D - 1);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("beta_raw", "D - 1",
        beta_raw_1dim__);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("beta_raw", "K", K);
      current_statement__ = 97;
      stan::math::validate_positive_index("p", "D", D);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("w_norm", "D", D);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("beta", "D", D);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("mu", "N", N);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("mu", "D", D);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("logits", "N", N);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("logits", "D", D);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (beta_raw_1dim__ * K) + 1 + (D - 1) + D;
  }
  inline std::string model_name() const final {
    return "model_EFDM";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_EFDM_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_raw_1dim__, K,
          DUMMY_VAR__);
      current_statement__ = 1;
      beta_raw = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_raw_1dim__, K);
      local_scalar_t__ aplus = DUMMY_VAR__;
      current_statement__ = 2;
      aplus = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      current_statement__ = 3;
      p = in__.template read_constrain_simplex<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, D);
      Eigen::Matrix<local_scalar_t__,-1,1> w_norm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      current_statement__ = 4;
      w_norm = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                 lp__, D);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(D, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, D, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> logits =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, D, DUMMY_VAR__);
      current_statement__ = 11;
      for (int l = 1; l <= K; ++l) {
        current_statement__ = 9;
        stan::model::assign(beta, 0.0, "assigning variable beta",
          stan::model::index_uni(D), stan::model::index_uni(l));
      }
      current_statement__ = 16;
      for (int k = 1; k <= (D - 1); ++k) {
        current_statement__ = 14;
        for (int l = 1; l <= K; ++l) {
          current_statement__ = 12;
          stan::model::assign(beta,
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(k), stan::model::index_uni(l)),
            "assigning variable beta", stan::model::index_uni(k),
            stan::model::index_uni(l));
        }
      }
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 19;
        for (int m = 1; m <= D; ++m) {
          current_statement__ = 17;
          stan::model::assign(logits,
            stan::math::multiply(
              stan::model::rvalue(X, "X", stan::model::index_uni(i),
                stan::model::index_omni()),
              stan::math::transpose(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(m),
                  stan::model::index_omni()))), "assigning variable logits",
            stan::model::index_uni(i), stan::model::index_uni(m));
        }
        current_statement__ = 20;
        stan::model::assign(mu,
          stan::math::to_row_vector(
            stan::math::softmax(
              stan::math::to_vector(
                stan::model::rvalue(logits, "logits",
                  stan::model::index_uni(i), stan::model::index_omni())))),
          "assigning variable mu", stan::model::index_uni(i),
          stan::model::index_omni());
      }
      {
        current_statement__ = 45;
        lp_accum__.add(stan::math::dirichlet_lpdf<propto__>(p,
                         stan::math::rep_vector(1, D)));
        current_statement__ = 46;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(aplus, (1 * 0.001),
                         0.001));
        current_statement__ = 49;
        for (int r = 1; r <= D; ++r) {
          current_statement__ = 47;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(w_norm, "w_norm",
                             stan::model::index_uni(r)), 30, 30));
        }
        current_statement__ = 54;
        for (int k = 1; k <= (D - 1); ++k) {
          current_statement__ = 52;
          for (int l = 1; l <= K; ++l) {
            current_statement__ = 50;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(beta_raw, "beta_raw",
                               stan::model::index_uni(k),
                               stan::model::index_uni(l)), 0, sd_prior));
          }
        }
        current_statement__ = 76;
        for (int i = 1; i <= N; ++i) {
          local_scalar_t__ temp = DUMMY_VAR__;
          local_scalar_t__ temp2 = DUMMY_VAR__;
          current_statement__ = 57;
          stan::math::validate_non_negative_index("alpha", "D", D);
          Eigen::Matrix<local_scalar_t__,-1,1> alpha =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
          current_statement__ = 59;
          stan::math::validate_non_negative_index("Y_temp", "D", D);
          Eigen::Matrix<local_scalar_t__,-1,1> Y_temp =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
          current_statement__ = 61;
          stan::math::validate_non_negative_index("tau", "D", D);
          Eigen::Matrix<local_scalar_t__,-1,1> tau =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
          current_statement__ = 63;
          temp = 0.0;
          current_statement__ = 64;
          temp2 = 0.0;
          current_statement__ = 67;
          for (int j = 1; j <= D; ++j) {
            current_statement__ = 65;
            temp2 = (temp2 +
              ((stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
              stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j)))
              *
              stan::math::fmin(1.0,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                   stan::model::index_uni(j)) /
                stan::model::rvalue(p, "p", stan::model::index_uni(j))))));
          }
          current_statement__ = 73;
          for (int j = 1; j <= D; ++j) {
            current_statement__ = 68;
            stan::model::assign(alpha, (aplus *
              ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                  stan::model::index_uni(j)) -
              ((stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
              stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j)))
              *
              stan::math::fmin(1.0,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                   stan::model::index_uni(j)) /
                stan::model::rvalue(p, "p", stan::model::index_uni(j)))))) /
              (1 - temp2))), "assigning variable alpha",
              stan::model::index_uni(j));
            current_statement__ = 69;
            stan::model::assign(tau, (aplus *
              ((stan::model::rvalue(w_norm, "w_norm",
                  stan::model::index_uni(j)) *
              stan::math::fmin(1.0,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                   stan::model::index_uni(j)) /
                stan::model::rvalue(p, "p", stan::model::index_uni(j))))) /
              (1 -
              (stan::model::rvalue(w_norm, "w_norm",
                 stan::model::index_uni(j)) *
              stan::math::fmin(1.0,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                   stan::model::index_uni(j)) /
                stan::model::rvalue(p, "p", stan::model::index_uni(j)))))))),
              "assigning variable tau", stan::model::index_uni(j));
            current_statement__ = 70;
            temp = (((temp +
              stan::math::lgamma(
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(j)) +
                stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                  stan::model::index_uni(j)))))
              -
              stan::math::lgamma(
                stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))))
              -
              stan::math::lgamma(
                (stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                   stan::model::index_uni(j)) + 1)));
            current_statement__ = 71;
            stan::model::assign(Y_temp,
              ((((((stan::math::log(
                      stan::model::rvalue(p, "p", stan::model::index_uni(j)))
              +
              stan::math::lgamma((aplus +
                stan::model::rvalue(tau, "tau", stan::model::index_uni(j)))))
              -
              stan::math::lgamma(((aplus +
                stan::model::rvalue(n, "n", stan::model::index_uni(i))) +
                stan::model::rvalue(tau, "tau", stan::model::index_uni(j)))))
              +
              stan::math::lgamma(
                stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))))
              +
              stan::math::lgamma(
                ((stan::model::rvalue(alpha, "alpha",
                    stan::model::index_uni(j)) +
                stan::model::rvalue(tau, "tau", stan::model::index_uni(j))) +
                stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                  stan::model::index_uni(j))))) -
              stan::math::lgamma(
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(j)) +
                stan::model::rvalue(tau, "tau", stan::model::index_uni(j)))))
              -
              stan::math::lgamma(
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(j)) +
                stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                  stan::model::index_uni(j))))), "assigning variable Y_temp",
              stan::model::index_uni(j));
          }
          current_statement__ = 74;
          lp_accum__.add(((stan::math::lgamma(
                             (stan::model::rvalue(n, "n",
                                stan::model::index_uni(i)) + 1)) + temp) +
            stan::math::log_sum_exp(Y_temp)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_EFDM_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> beta_raw =
        Eigen::Matrix<double,-1,-1>::Constant(beta_raw_1dim__, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta_raw = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_raw_1dim__, K);
      double aplus = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      aplus = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> p =
        Eigen::Matrix<double,-1,1>::Constant(D,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      p = in__.template read_constrain_simplex<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(lp__, D);
      Eigen::Matrix<double,-1,1> w_norm =
        Eigen::Matrix<double,-1,1>::Constant(D,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      w_norm = in__.template read_constrain_lub<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1,
                 lp__, D);
      Eigen::Matrix<double,-1,-1> beta =
        Eigen::Matrix<double,-1,-1>::Constant(D, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> mu =
        Eigen::Matrix<double,-1,-1>::Constant(N, D,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> logits =
        Eigen::Matrix<double,-1,-1>::Constant(N, D,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta_raw);
      out__.write(aplus);
      out__.write(p);
      out__.write(w_norm);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      for (int l = 1; l <= K; ++l) {
        current_statement__ = 9;
        stan::model::assign(beta, 0.0, "assigning variable beta",
          stan::model::index_uni(D), stan::model::index_uni(l));
      }
      current_statement__ = 16;
      for (int k = 1; k <= (D - 1); ++k) {
        current_statement__ = 14;
        for (int l = 1; l <= K; ++l) {
          current_statement__ = 12;
          stan::model::assign(beta,
            stan::model::rvalue(beta_raw, "beta_raw",
              stan::model::index_uni(k), stan::model::index_uni(l)),
            "assigning variable beta", stan::model::index_uni(k),
            stan::model::index_uni(l));
        }
      }
      current_statement__ = 22;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 19;
        for (int m = 1; m <= D; ++m) {
          current_statement__ = 17;
          stan::model::assign(logits,
            stan::math::multiply(
              stan::model::rvalue(X, "X", stan::model::index_uni(i),
                stan::model::index_omni()),
              stan::math::transpose(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(m),
                  stan::model::index_omni()))), "assigning variable logits",
            stan::model::index_uni(i), stan::model::index_uni(m));
        }
        current_statement__ = 20;
        stan::model::assign(mu,
          stan::math::to_row_vector(
            stan::math::softmax(
              stan::math::to_vector(
                stan::model::rvalue(logits, "logits",
                  stan::model::index_uni(i), stan::model::index_omni())))),
          "assigning variable mu", stan::model::index_uni(i),
          stan::model::index_omni());
      }
      if (emit_transformed_parameters__) {
        out__.write(beta);
        out__.write(mu);
        out__.write(logits);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 44;
      for (int i = 1; i <= N; ++i) {
        double temp = std::numeric_limits<double>::quiet_NaN();
        double temp2 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 25;
        stan::math::validate_non_negative_index("alpha", "D", D);
        Eigen::Matrix<double,-1,1> alpha =
          Eigen::Matrix<double,-1,1>::Constant(D,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::math::validate_non_negative_index("Y_temp", "D", D);
        Eigen::Matrix<double,-1,1> Y_temp =
          Eigen::Matrix<double,-1,1>::Constant(D,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 29;
        stan::math::validate_non_negative_index("tau", "D", D);
        Eigen::Matrix<double,-1,1> tau =
          Eigen::Matrix<double,-1,1>::Constant(D,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 31;
        temp = 0.0;
        current_statement__ = 32;
        temp2 = 0.0;
        current_statement__ = 35;
        for (int j = 1; j <= D; ++j) {
          current_statement__ = 33;
          temp2 = (temp2 +
            ((stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
            stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j)))
            *
            stan::math::fmin(1.0,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                 stan::model::index_uni(j)) /
              stan::model::rvalue(p, "p", stan::model::index_uni(j))))));
        }
        current_statement__ = 41;
        for (int j = 1; j <= D; ++j) {
          current_statement__ = 36;
          stan::model::assign(alpha, (aplus *
            ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                stan::model::index_uni(j)) -
            ((stan::model::rvalue(p, "p", stan::model::index_uni(j)) *
            stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j)))
            *
            stan::math::fmin(1.0,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                 stan::model::index_uni(j)) /
              stan::model::rvalue(p, "p", stan::model::index_uni(j)))))) / (1
            - temp2))), "assigning variable alpha", stan::model::index_uni(j));
          current_statement__ = 37;
          stan::model::assign(tau, (aplus *
            ((stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j))
            *
            stan::math::fmin(1.0,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                 stan::model::index_uni(j)) /
              stan::model::rvalue(p, "p", stan::model::index_uni(j))))) / (1
            -
            (stan::model::rvalue(w_norm, "w_norm", stan::model::index_uni(j))
            *
            stan::math::fmin(1.0,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i),
                 stan::model::index_uni(j)) /
              stan::model::rvalue(p, "p", stan::model::index_uni(j)))))))),
            "assigning variable tau", stan::model::index_uni(j));
          current_statement__ = 38;
          temp = (((temp +
            stan::math::lgamma(
              (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))
              +
              stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                stan::model::index_uni(j)))))
            -
            stan::math::lgamma(
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))))
            -
            stan::math::lgamma(
              (stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                 stan::model::index_uni(j)) + 1)));
          current_statement__ = 39;
          stan::model::assign(Y_temp,
            ((((((stan::math::log(
                    stan::model::rvalue(p, "p", stan::model::index_uni(j))) +
            stan::math::lgamma((aplus +
              stan::model::rvalue(tau, "tau", stan::model::index_uni(j))))) -
            stan::math::lgamma(((aplus +
              stan::model::rvalue(n, "n", stan::model::index_uni(i))) +
              stan::model::rvalue(tau, "tau", stan::model::index_uni(j))))) +
            stan::math::lgamma(
              stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))))
            +
            stan::math::lgamma(
              ((stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))
              + stan::model::rvalue(tau, "tau", stan::model::index_uni(j))) +
              stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                stan::model::index_uni(j))))) -
            stan::math::lgamma(
              (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))
              + stan::model::rvalue(tau, "tau", stan::model::index_uni(j)))))
            -
            stan::math::lgamma(
              (stan::model::rvalue(alpha, "alpha", stan::model::index_uni(j))
              +
              stan::model::rvalue(Y, "Y", stan::model::index_uni(i),
                stan::model::index_uni(j))))), "assigning variable Y_temp",
            stan::model::index_uni(j));
        }
        current_statement__ = 42;
        stan::model::assign(log_lik,
          ((stan::math::lgamma(
              (stan::model::rvalue(n, "n", stan::model::index_uni(i)) + 1)) +
          temp) + stan::math::log_sum_exp(Y_temp)),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_raw_1dim__, K,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(beta_raw_1dim__, K),
        "assigning variable beta_raw");
      out__.write(beta_raw);
      local_scalar_t__ aplus = DUMMY_VAR__;
      current_statement__ = 2;
      aplus = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, aplus);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(p,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(D),
        "assigning variable p");
      out__.write_free_simplex(p);
      Eigen::Matrix<local_scalar_t__,-1,1> w_norm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(w_norm,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(D),
        "assigning variable w_norm");
      out__.write_free_lub(0, 1, w_norm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta_raw",
        "double",
        std::vector<size_t>{static_cast<size_t>(beta_raw_1dim__),
          static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "aplus", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(D)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "w_norm", "double",
        std::vector<size_t>{static_cast<size_t>(D)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> beta_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(beta_raw_1dim__, K,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_raw_flat__;
        current_statement__ = 1;
        beta_raw_flat__ = context__.vals_r("beta_raw");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= beta_raw_1dim__; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(beta_raw, beta_raw_flat__[(pos__ - 1)],
              "assigning variable beta_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta_raw);
      local_scalar_t__ aplus = DUMMY_VAR__;
      current_statement__ = 2;
      aplus = context__.vals_r("aplus")[(1 - 1)];
      out__.write_free_lb(0, aplus);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 3;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_simplex(p);
      Eigen::Matrix<local_scalar_t__,-1,1> w_norm =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(D, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> w_norm_flat__;
        current_statement__ = 4;
        w_norm_flat__ = context__.vals_r("w_norm");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(w_norm, w_norm_flat__[(pos__ - 1)],
            "assigning variable w_norm", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, w_norm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta_raw", "aplus", "p", "w_norm"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"beta", "mu", "logits"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    beta_raw_1dim__),
                                                 static_cast<size_t>(K)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(D)},
                std::vector<size_t>{static_cast<size_t>(D)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(D),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(D)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(D)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "aplus");
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      param_names__.emplace_back(std::string() + "w_norm" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "logits" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= beta_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    param_names__.emplace_back(std::string() + "aplus");
    for (int sym1__ = 1; sym1__ <= (D - 1); ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      param_names__.emplace_back(std::string() + "w_norm" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "logits" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_raw_1dim__) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"aplus\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(D) + "},\"block\":\"parameters\"},{\"name\":\"w_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(D) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(D) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(D) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logits\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(D) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(beta_raw_1dim__) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"aplus\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((D -1)) + "},\"block\":\"parameters\"},{\"name\":\"w_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(D) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(D) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(D) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logits\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(D) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((beta_raw_1dim__ * K) + 1) + D) + D);
    const size_t num_transformed = emit_transformed_parameters * ((((D * K) +
      (N * D)) + (N * D)));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((beta_raw_1dim__ * K) + 1) + D) + D);
    const size_t num_transformed = emit_transformed_parameters * ((((D * K) +
      (N * D)) + (N * D)));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_EFDM_namespace::model_EFDM;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_EFDM_namespace::profiles__;
}
#endif
#endif
